# -*- coding: utf-8 -*-
"""Flood_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tkVP1HsDsJg6FI-yXpSyxXrcNiwpI6kB

# **Flood Prediction Using Random Forest**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, roc_auc_score

data=pd.read_csv("/content/flood.csv")

data.head()

data.describe()

data.isnull()

features = ["MonsoonIntensity", "TopographyDrainage", "RiverManagement", "Deforestation", "Urbanization", "ClimateChange","DamsQuality","Siltation","AgriculturalPractices","Encroachments","IneffectiveDisasterPreparedness","DrainageSystems","CoastalVulnerability","Landslides","Watersheds","DeterioratingInfrastructure","PopulationScore","WetlandLoss","InadequatePlanning","PoliticalFactors","FloodProbability"]
target = "FloodProbability"
X = data[features]
y = data[target]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, max_depth=5, random_state=42)

model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

new_data = pd.DataFrame({
    "MonsoonIntensity": [4],
    "TopographyDrainage":[8],
    "RiverManagement":[7],
    "Deforestation":[6],
    "Urbanization":[5],
    "ClimateChange":[6],
    "DamsQuality":[6],
    "Siltation":[4],
    "AgriculturalPractices":[5],
    "Encroachments":[6],
    "IneffectiveDisasterPreparedness":[4],
    "DrainageSystems":[7],
    "CoastalVulnerability":[4],
    "Landslides":[8],
    "Watersheds":[7],
    "DeterioratingInfrastructure":[5],
    "PopulationScore":[7],
    "WetlandLoss":[4],
    "InadequatePlanning":[5],
    "PoliticalFactors":[7],
    "FloodProbability":[0.485]

})


for col in new_data.columns:
    if new_data[col].dtype == 'object':
        new_data[col] = le.transform(new_data[col])

new_data_scaled = scaler.transform(new_data)

predicted_flood_probability = model.predict(new_data_scaled)[0]
print("Predicted flood probability:", predicted_flood_probability)