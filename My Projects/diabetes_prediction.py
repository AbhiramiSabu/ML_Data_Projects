# -*- coding: utf-8 -*-
"""Diabetes_Prediction.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xOmGPpW_fpEFF7sFj18lOtAg5eLJgryb

# **DIABETES PREDICTION USING LOGISTIC REGRESSION**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, roc_auc_score
data=pd.read_csv("/content/diabetexcel - Copy.csv")

data.describe()

data.isnull

data.nunique

data["BloodPressure"].fillna(data["BloodPressure"].mean(), inplace=True)
X = data.drop("Outcome", axis=1)
y = data["Outcome"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LogisticRegression(solver="liblinear")
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("ROC AUC Score:", roc_auc_score(y_test, y_pred))
new_data = pd.DataFrame({  # Replace with actual data to make predictions
    "Pregnancies":[48],
    "Glucose": [110],
    "BloodPressure": [90],
    "SkinThickness": [20],
    "Insulin": [80],
    "BMI": [28],
    "DiabetesPedigreeFunction": [0.6],
    "Age": [45],

})

diabetes_risk = model.predict(new_data)
print("Predicted diabetes risk (probability of having diabetes):", diabetes_risk)

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)